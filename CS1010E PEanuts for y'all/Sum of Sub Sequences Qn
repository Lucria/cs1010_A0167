Sum of Sub-sequences

Problem Description

Given a list of n non-zero integer values, a sub-sequence is defined as any non-empty sequence of at most n values that appear contiguously (i.e. next to each other) within the given list.

For example, the list [ -3, 4, -1, 2 ] has the following sub-sequences:

Sub-sequence	----- Sum of sub-sequence
[ -3, 4, -1, 2, ] ------	2
[ -3, 4, -1, ] -----	0
[ 4, -1, 2 ] -----	5
[ -3, 4 ] -----	1
[ 4, -1 ] -----	3
[ -1, 2 ] -----	1
[ -3 ] -----	-3
[ 4 ] -----	4
[ -1 ] -----	-1
[ 2 ] -----	2

Values within a sub-sequence can be added to give the sum as shown in the above table. Moreover, the maximum sum of sub-sequences is 5 (from the sub-sequence [ 4 -1 2 ]).

As another example, the list of integer values [ -2, 1, -3, 4, -1, 2, 1, -5, 4 ] contains the sub-sequence [ 4, -1, 2, 1 ] with the sum (4) + (-1) + (2) + (1) = 6 which is maximum. No other sub-sequence has a sum larger than 6.

Task

Given a list of non-zero integer values, your task is to find the maximum sum of sub-sequences of the list.

Assume there is at least one value in the list;

Each non-zero value in the list ranges between -9 to 9 (excluding 0, of course).

Sample runs are provided for you to test your program. These sample runs represent the corner test cases for small inputs. You are encouraged to expand on these and come up with your own test cases.

Name your program sum5.c

Write a program that reads as input a list of non-zero integer values. Input is terminated by the sentinel value 0.

**Hint: The intuition behind finding the maximum sum of sub-sequences is simple.

If the sum of the sub-sequence from [ xi ... xj-1 ] is negative, then we will be better off checking a new sub-sequence starting with xj as [ xj ... xk ] has a larger sum than [ xi ... xj-1 xj ... xk ].**

The last line of output is the maximum sub-sequence sum, as well as the location within which the sub-sequence is found. For example, in the list of values [ -3, 4, -1, 2 ], the maximum sum 5 is associated with the sub-sequence between the second and fourth values. Hence the corresponding output is 5[2,4].

In addition, if there are multiple sub-sequences with the same maximum sum, choose the one with the minimum ending position; if there are still multiple sub-sequences with the same minimum ending position, choose the shortest sub-sequence. As an example, the list [ 1, -1, 2, -2, 2, 0 ] has a maximum sum of sub-sequences of 2 given by three sequences:

[ 1, -1, 2 ] (within positions 1 to 3)
[ 2 ] (at position 3)
[ 2 ] (at position 5)
Choosing the minimum ending position would eliminate option (3). And between options (1) and (2) that ends at the same ending position, we choose the shorter one. Hence, option (2) is the final choice.

The following is a sample run of the program. User input is italicised. Ensure that the last line of output is followed by a newline character.

$ ./a.out
1 0
1[1,1]
$ ./a.out
-1 0
-1[1,1]
$ ./a.out
1 1 0
2[1,2]
$ ./a.out
1 -1 0
1[1,1]
$ ./a.out
-1 1 0
1[2,2]
$ ./a.out
-1 -1 0
-1[1,1]
$ ./a.out
1 1 -1 0
2[1,2]
$ ./a.out
1 -1 1 0
1[1,1]
$ ./a.out
-1 1 -1 0
1[2,2]
$ ./a.out
1 -1 2 0
2[3,3]
$ ./a.out
-1 2 -3 4 0
4[4,4]
$ ./a.out
1 1 -2 2 0
2[1,2]
$ ./a.out
2 -1 1 0
2[1,1]
$ ./a.out
1 -1 2 -2 2 0
2[3,3]
$ ./a.out
-2 1 -3 4 -1 2 1 -5 4 0
6[4,7]
