const bool is_testing = 0;

#include <bits/stdc++.h>

#define endl '\n'
#define pb push_back

using namespace std;
typedef long long ll;
typedef long double ld;

typedef vector<ll> veint;
typedef pair<ll, ll> pii;
const int MAX_VALUE = int(5e3 + 5);
const ld EPS = 1e-7;
ld sqr(ld a) { return a * a; }

struct point {
    ld x, y;

    point() {}
    point(ld x, ld y) : x(x), y(y) {}
};

point a, b, c;
point f;

ld dot(point p1, point p2, point p3) {
    return (p2.x - p1.x) * (p3.x - p1.x) + (p2.y - p1.y) * (p3.y - p1.y);
}

ld cross(point p1, point p2, point p3) {
    return (p2.x - p1.x) * (p3.y - p1.y) - (p2.y - p1.y) * (p3.x - p1.x);
}

ld dsqr(point p1, point p2) {
    return sqr(p1.x - p2.x) + sqr(p1.y - p2.y);
}

ld d(point p1, point p2) {
    return sqrt(dsqr(p1, p2));

}

ld get_angle(point a, point b, point c) {
    return fabs(atan2(cross(a, b, c), dot(a, b, c)));
}

bool in_angle(point a, point b, point c, point f) {
    ld a1 = get_angle(a, b, c);
    ld t;
    t = 360 * a1 / M_PI;
    ld a2 = get_angle(a, b, f);
    t = 360 * a2 / M_PI;

    ld a3 = get_angle(a, f, c);
    t = 360 * a3 / M_PI;

    return fabs(a1 - a2 - a3) <= EPS;
}
ld area(point p1, point p2, point p3) {
    return fabs(cross(p1, p2, p3));
}

bool test(point p1, point p2, point p3, point f) {
    return area(p1, p2, p3) - area(p1, p2, f) - area(p1, p3, f) - area(p2, p3, f) <= EPS;
}

int main() {
    if (is_testing)
        freopen("/home/birdi/cpp/in.txt", "r", stdin);
    ios::sync_with_stdio(0);
    cout << fixed << setprecision(6);

    cin >> a.x >> a.y >> b.x >> b.y >> c.x >> c.y;
    cin >> f.x >> f.y;
    vector<point> v = {a, b, c};
    for (int i = 0; i < 3; i++) {
        point p1 = v[(i + 1) % 3], p2 = v[(i + 2) % 3];
        if (test(v[i], p1, p2, f)) {
            point p1 = v[(i + 1) % 3], p2 = v[(i + 2) % 3];
            cout << d(p1, p2);
            return 0;
        }
    }

    for (int i = 1; i < 3; i++)
        if (d(f, v[i]) < d(f, v[0])) swap(v[0], v[i]);

    cout << d(v[0], v[1]) + d(v[0], v[2]);
    return 0;
}